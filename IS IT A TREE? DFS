import java.util.*;

    public class MAIN {
        public static boolean isTree(int n, int[][] edges) {
            if (edges.length != (n - 1)) return false;

            //BUILDING ADJACENCY LIST
            List<List<Integer>> adj_List = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                adj_List.add(new ArrayList<>());
            }
            for (int[] node : edges) {
                adj_List.get(node[0]).add(node[1]);
                adj_List.get(node[1]).add(node[0]);
            }

            boolean[] visited = new boolean[n];
            if (hasCycle(0, -1, adj_List, visited)) return false; // Condition 2: Check for cycles

            // Condition 1: Check if all nodes are visited (graph is connected)
            for (boolean v : visited) {
                if (!v) return false;
            }

            return true;
        }

        public static boolean hasCycle(int node, int parent, List<List<Integer>> adj_List, boolean[] visited) {
            visited[node] = true;
            // DFS
            for (int neighbor : adj_List.get(node)) {
                if (!visited[neighbor]) {
                    if (hasCycle(neighbor, node, adj_List, visited)) return true;
                } else if (neighbor != parent) return true; // Found a back edge â†’ cycle
            }
            return false;
        }

            public static void main(String[] args) {
            int n = 5;
            int[][] edges = {{0,1}, {0,2}, {0,3}, {3,4}}; // Example: A valid tree
            System.out.println(isTree(n, edges)); // Output: true

            int[][] edges2 = {{0,1}, {1,2}, {2,0}, {3,4}}; // Example: Not a tree (cycle + disconnected)
            System.out.println(isTree(5, edges2)); // Output: false
        }
    }
